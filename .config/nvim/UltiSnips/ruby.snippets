# Copyright Â© 2017 Paul Sonkoly

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

priority 50

snippet def "like the normal def snippet but with VISUAL for the content"
def ${1:method_name}
	${0:${VISUAL}}
end
endsnippet

snippet reqra "require 'rspec/autorun'"
require 'rspec/autorun'
endsnippet

snippet RS "RSpec.describe"
RSpec.describe ${1:SomeModule} do
	${0:${VISUAL}}
end
endsnippet

snippet gem "gem definition in Gemfile" 'b'
gem '$0'
endsnippet

snippet @!a "yard attribute"
@!attribute [${2:r}] ${1:name}
#   @return [${3:String}] ${0:description}
endsnippet

snippet @!m "yard method (for metaprogramming defined methods)"
@!method ${1:name}${2:(${3:*args})}
endsnippet

snippet @r "yard return"
@return [${1:String}] ${0:description}
endsnippet

snippet @p "yard parameter"
@param ${1:name} [${2:String}] ${0:description}
endsnippet

snippet pry "require pry; binding.pry"
require 'pry'; binding.pry
endsnippet

snippet ba "before_action (rails)" b
before_action ${0::method}
endsnippet

snippet wpsa "when platform settings are" b
include_context 'when platform setting are', ${1:unit}: { ${2:setting}: ${3:true} }
endsnippet

snippet atr "rails form attribute" b
attribute ${1::name}, ${0:Decimal}
endsnippet

snippet ep "entrypoint"
# frozen_string_literal: true

module `!v substitute(split(expand(@%), '/')[-2], '\v(^|_)(.)', '\u\2', 'g')`

  class EntryPoint

    include ::EntryPoint

    def initialize(${1:employee}:)
      self.action = Action.new($1: $1)
    end
  end
end
endsnippet
